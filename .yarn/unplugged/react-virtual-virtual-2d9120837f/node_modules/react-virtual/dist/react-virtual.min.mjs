import React from 'react';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var useIsomorphicLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;

function useScroll(nodeRef, onChange) {
  var _React$useState = React.useState(nodeRef.current),
      element = _React$useState[0],
      setElement = _React$useState[1];

  var onChangeRef = React.useRef();
  onChangeRef.current = onChange;
  useIsomorphicLayoutEffect(function () {
    if (nodeRef.current !== element) {
      setElement(nodeRef.current);
    }
  });
  useIsomorphicLayoutEffect(function () {
    if (element) {
      onChangeRef.current({
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      });
    }
  }, [element]);
  React.useEffect(function () {
    if (!element) {
      return;
    }

    var handler = function handler(e) {
      onChangeRef.current({
        scrollLeft: e.target.scrollLeft,
        scrollTop: e.target.scrollTop
      });
    };

    element.addEventListener('scroll', handler, {
      capture: false,
      passive: true
    });
    return function () {
      element.removeEventListener('scroll', handler);
    };
  }, [element]);
}

var props = ['bottom', 'height', 'left', 'right', 'top', 'width'];

var rectChanged = function rectChanged(a, b) {
  if (a === void 0) {
    a = {};
  }

  if (b === void 0) {
    b = {};
  }

  return props.some(function (prop) {
    return a[prop] !== b[prop];
  });
};

var observedNodes = /*#__PURE__*/new Map();
var rafId;

var run = function run() {
  var changedStates = [];
  observedNodes.forEach(function (state, node) {
    var newRect = node.getBoundingClientRect();

    if (rectChanged(newRect, state.rect)) {
      state.rect = newRect;
      changedStates.push(state);
    }
  });
  changedStates.forEach(function (state) {
    state.callbacks.forEach(function (cb) {
      return cb(state.rect);
    });
  });
  rafId = window.requestAnimationFrame(run);
};

function observeRect(node, cb) {
  return {
    observe: function observe() {
      var wasEmpty = observedNodes.size === 0;

      if (observedNodes.has(node)) {
        observedNodes.get(node).callbacks.push(cb);
      } else {
        observedNodes.set(node, {
          rect: undefined,
          hasRectChanged: false,
          callbacks: [cb]
        });
      }

      if (wasEmpty) run();
    },
    unobserve: function unobserve() {
      var state = observedNodes.get(node);

      if (state) {
        // Remove the callback
        var index = state.callbacks.indexOf(cb);
        if (index >= 0) state.callbacks.splice(index, 1); // Remove the node reference

        if (!state.callbacks.length) observedNodes["delete"](node); // Stop the loop

        if (!observedNodes.size) cancelAnimationFrame(rafId);
      }
    }
  };
}

function useRect(nodeRef) {
  var _React$useState = React.useState(nodeRef.current),
      element = _React$useState[0],
      setElement = _React$useState[1];

  var _React$useState2 = React.useState(null),
      rect = _React$useState2[0],
      setRect = _React$useState2[1];

  var initialRectSet = React.useRef(false);
  useIsomorphicLayoutEffect(function () {
    if (nodeRef.current !== element) {
      setElement(nodeRef.current);
    }
  });
  useIsomorphicLayoutEffect(function () {
    if (element && !initialRectSet.current) {
      initialRectSet.current = true;
      setRect(element.getBoundingClientRect());
    }
  }, [element]);
  React.useEffect(function () {
    if (!element) {
      return;
    }

    var observer = observeRect(element, setRect);
    observer.observe();
    return function () {
      observer.unobserve();
    };
  }, [element]);
  return rect;
}

var defaultEstimateSize = function defaultEstimateSize() {
  return 50;
};

function useVirtual(_ref) {
  var _ref3, _measurements;

  var _ref$size = _ref.size,
      size = _ref$size === void 0 ? 0 : _ref$size,
      _ref$estimateSize = _ref.estimateSize,
      estimateSize = _ref$estimateSize === void 0 ? defaultEstimateSize : _ref$estimateSize,
      _ref$overscan = _ref.overscan,
      overscan = _ref$overscan === void 0 ? 0 : _ref$overscan,
      _ref$paddingStart = _ref.paddingStart,
      paddingStart = _ref$paddingStart === void 0 ? 0 : _ref$paddingStart,
      _ref$paddingEnd = _ref.paddingEnd,
      paddingEnd = _ref$paddingEnd === void 0 ? 0 : _ref$paddingEnd,
      parentRef = _ref.parentRef,
      horizontal = _ref.horizontal,
      scrollToFn = _ref.scrollToFn;
  var sizeKey = horizontal ? 'width' : 'height';
  var scrollKey = horizontal ? 'scrollLeft' : 'scrollTop';

  var _ref2 = useRect(parentRef) || (_ref3 = {}, _ref3[sizeKey] = 0, _ref3),
      outerSize = _ref2[sizeKey];

  var _React$useState = React.useState(0),
      scrollOffset = _React$useState[0],
      _setScrollOffset = _React$useState[1];

  var scrollOffsetPlusOuterSize = scrollOffset + outerSize;
  useScroll(parentRef, function (_ref4) {
    var newScrollOffset = _ref4[scrollKey];

    _setScrollOffset(newScrollOffset);
  });
  var defaultScrollToFn = React.useCallback(function (offset) {
    if (parentRef.current) {
      _setScrollOffset(offset);

      parentRef.current[scrollKey] = offset;
    }
  }, [parentRef, scrollKey]);
  var resolvedScrollToFn = scrollToFn || defaultScrollToFn;
  scrollToFn = React.useCallback(function (offset) {
    resolvedScrollToFn(offset, defaultScrollToFn);
  }, [defaultScrollToFn, resolvedScrollToFn]);

  var _React$useState2 = React.useState({}),
      measuredCache = _React$useState2[0],
      setMeasuredCache = _React$useState2[1];

  var _React$useMemo = React.useMemo(function () {
    var measurements = [];
    var reversedMeasurements = [];

    for (var i = 0, j = size - 1; i < size; i++, j--) {
      var _start = measurements[i - 1] ? measurements[i - 1].end : paddingStart;

      var _size = measuredCache[i] || estimateSize(i);

      var _end = _start + _size;

      var bounds = {
        index: i,
        start: _start,
        size: _size,
        end: _end
      };
      measurements[i] = _extends({}, bounds);
      reversedMeasurements[j] = _extends({}, bounds);
    }

    return {
      measurements: measurements,
      reversedMeasurements: reversedMeasurements
    };
  }, [estimateSize, measuredCache, paddingStart, size]),
      measurements = _React$useMemo.measurements,
      reversedMeasurements = _React$useMemo.reversedMeasurements;

  var totalSize = (((_measurements = measurements[size - 1]) == null ? void 0 : _measurements.end) || 0) + paddingEnd;
  var start = React.useMemo(function () {
    return reversedMeasurements.reduce(function (last, rowStat) {
      return rowStat.end >= scrollOffset ? rowStat : last;
    }, reversedMeasurements[0]);
  }, [reversedMeasurements, scrollOffset]);
  var end = React.useMemo(function () {
    return measurements.reduce(function (last, rowStat) {
      return rowStat.start <= scrollOffsetPlusOuterSize ? rowStat : last;
    }, measurements[0]);
  }, [measurements, scrollOffsetPlusOuterSize]);
  var startIndex = start ? start.index : 0;
  var endIndex = end ? end.index : 0; // Always add at least one overscan item, so focus will work

  startIndex = Math.max(startIndex - overscan, 0);
  endIndex = Math.min(endIndex + overscan, size - 1);
  var latestRef = React.useRef({});
  latestRef.current = {
    measurements: measurements,
    outerSize: outerSize,
    scrollOffset: scrollOffset,
    scrollOffsetPlusOuterSize: scrollOffsetPlusOuterSize,
    totalSize: totalSize
  };
  var virtualItems = React.useMemo(function () {
    var virtualItems = [];

    var _loop = function _loop(i) {
      var measurement = measurements[i];

      var item = _extends(_extends({}, measurement), {}, {
        measureRef: function measureRef(el) {
          var scrollOffset = latestRef.current.scrollOffset;

          if (el) {
            var _el$getBoundingClient = el.getBoundingClientRect(),
                measuredSize = _el$getBoundingClient[sizeKey];

            if (measuredSize !== item.size) {
              if (item.start < scrollOffset) {
                defaultScrollToFn(scrollOffset + (measuredSize - item.size));
              }

              setMeasuredCache(function (old) {
                var _extends2;

                return _extends(_extends({}, old), {}, (_extends2 = {}, _extends2[i] = measuredSize, _extends2));
              });
            }
          }
        }
      });

      virtualItems.push(item);
    };

    for (var i = startIndex; i <= endIndex; i++) {
      _loop(i);
    }

    return virtualItems;
  }, [startIndex, endIndex, measurements, sizeKey, defaultScrollToFn]);
  var mountedRef = React.useRef();
  useIsomorphicLayoutEffect(function () {
    if (mountedRef.current) {
      if (estimateSize || size) setMeasuredCache({});
    }

    mountedRef.current = true;
  }, [estimateSize, size]);
  var scrollToOffset = React.useCallback(function (toOffset, _temp) {
    var _ref5 = _temp === void 0 ? {} : _temp,
        _ref5$align = _ref5.align,
        align = _ref5$align === void 0 ? 'start' : _ref5$align;

    var _latestRef$current = latestRef.current,
        outerSize = _latestRef$current.outerSize,
        scrollOffset = _latestRef$current.scrollOffset,
        scrollOffsetPlusOuterSize = _latestRef$current.scrollOffsetPlusOuterSize;

    if (align === 'auto') {
      if (toOffset <= scrollOffset) {
        align = 'start';
      } else if (scrollOffset >= scrollOffsetPlusOuterSize) {
        align = 'end';
      } else {
        align = 'start';
      }
    }

    if (align === 'start') {
      scrollToFn(toOffset);
    } else if (align === 'end') {
      scrollToFn(toOffset - outerSize);
    } else if (align === 'center') {
      scrollToFn(toOffset - outerSize / 2);
    }
  }, [scrollToFn]);
  var tryScrollToIndex = React.useCallback(function (index, _temp2) {
    var _ref6 = _temp2 === void 0 ? {} : _temp2,
        _ref6$align = _ref6.align,
        align = _ref6$align === void 0 ? 'auto' : _ref6$align,
        rest = _objectWithoutPropertiesLoose(_ref6, ["align"]);

    var _latestRef$current2 = latestRef.current,
        measurements = _latestRef$current2.measurements,
        scrollOffset = _latestRef$current2.scrollOffset,
        scrollOffsetPlusOuterSize = _latestRef$current2.scrollOffsetPlusOuterSize;
    var measurement = measurements[Math.max(0, Math.min(index, size - 1))];

    if (!measurement) {
      return;
    }

    if (align === 'auto') {
      if (measurement.end >= scrollOffsetPlusOuterSize) {
        align = 'end';
      } else if (measurement.start <= scrollOffset) {
        align = 'start';
      } else {
        return;
      }
    }

    var toOffset = align === 'center' ? measurement.start + measurement.size / 2 : align === 'end' ? measurement.end : measurement.start;
    scrollToOffset(toOffset, _extends({
      align: align
    }, rest));
  }, [scrollToOffset, size]);
  var scrollToIndex = React.useCallback(function () {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // We do a double request here because of
    // dynamic sizes which can cause offset shift
    // and end up in the wrong spot. Unfortunately,
    // we can't know about those dynamic sizes until
    // we try and render them. So double down!
    tryScrollToIndex.apply(void 0, args);
    requestAnimationFrame(function () {
      tryScrollToIndex.apply(void 0, args);
    });
  }, [tryScrollToIndex]);
  return {
    virtualItems: virtualItems,
    totalSize: totalSize,
    scrollToOffset: scrollToOffset,
    scrollToIndex: scrollToIndex
  };
}

export { useVirtual };
//# sourceMappingURL=react-virtual.min.mjs.map
